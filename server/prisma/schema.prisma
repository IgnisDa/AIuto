// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id            String      @id @default(cuid())
  username      String      @unique
  email         String      @unique
  password      String
  groups        Group[]
  Journal       Journal[]
  MoodTrack     MoodEntry[]
  Schedule      Schedule[]
  adminOfGroups Group[]     @relation("groupAdmin")
}

/// Model to track groups
model Group {
  id           String  @id @default(uuid()) @db.Uuid
  title        String
  description  String?
  users        User[]
  inviteString String? @unique @db.Char(10)
  admin        User?   @relation("groupAdmin", fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
}

// ## Journal App ##

/// Model to todos
model Journal {
  id          String        @id @default(cuid())
  completed   Boolean       @default(false)
  title       String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ActivityLog ActivityLog[]
  user        User          @relation(fields: [userId], references: [id])
  userId      String
}

/// Activities that have already been completed
// This will be generated automatically from Journals and Schedulers on the backend
model ActivityLog {
  id         Int       @id @default(autoincrement())
  startedAt  DateTime?
  finishedAt DateTime?
  journal    Journal   @relation(fields: [journalId], references: [id])
  journalId  String
}

// An user can have only one each day
/// This will keep track of the user's mood on a daily basis
model MoodEntry {
  id     Int      @id @default(autoincrement())
  on     DateTime @default(now()) @db.Date
  mood   Mood     @default(ORDINARY)
  user   User     @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, on])
}

/// The list of emotions a user is allowed to feel
enum Mood {
  HAPPY // 5
  SAD // 4
  ORDINARY // 3
  ANGRY // 2
  DISTRESSED // 1
}

// This is synonymous to an alarm
/// This will show up in the user's timeline/schedule
model Schedule {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  title      String
  note       String?
  startTime  DateTime
  endTime    DateTime
  // the time duration after which the schedule should repeat
  repeatEach RepeatEach @default(NEVER)
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum RepeatEach {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
}
